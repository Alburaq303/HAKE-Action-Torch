import numpy as np
import torch
import pickle
import os

P_num = {
    'P0': 12,
    'P1': 10,
    'P2': 5,
    'P3': 31,
    'P4': 5,
    'P5': 13,
    'labels_r': 600
}

HO_weight   = np.array(
                [39.86157711904592, 42.40444304026247, 44.834823527125415, 39.73991804849558, 39.350051894572104, 43.56609116327042, 37.78352039671705, 37.27879696661561, 56.2961038839078, 27.187192997462514, 48.69942543701149, 29.31727479695975, 40.91791293317506, 41.48885009402292, 48.00306615559755, 50.012214583404685, 41.67212390491823, 42.921511271001236, 28.880648716145704, 29.52003435670287, 28.7948786160738, 39.76397874615436, 59.30640384054761, 16.891810699279997, 45.78457865943398, 38.21737256387448, 41.27866658762785, 55.327003753827235, 50.27550397062817, 35.892058594766205, 23.930101537298007, 42.1883315501357, 39.01256606369551, 46.40605772692243, 41.63484517972581, 51.90277694560517, 39.86157711904592, 44.3232983026516, 26.24108136535154, 33.525745002186696, 36.51886783101932, 28.541819963426093, 30.205498384606926, 45.882177032325544, 59.30640384054761, 19.277187457752916, 40.44149658882279, 40.27550397062818, 34.99276619895774, 45.24100203620805, 53.86572339704485, 50.012214583404685, 48.69942543701149, 17.603639967967627, 38.389734264590764, 54.535191293350984, 35.660893887007894, 47.692723818197855, 48.00306615559755, 43.80412030999668, 30.501126058559556, 32.35158707564564, 54.535191293350984, 62.31670379718742, 23.78093836099101, 48.00306615559755, 62.31670379718742, 36.67004315466653, 44.535191293350984, 42.58542526119043, 62.31670379718742, 48.892476988965356, 48.16697031747924, 34.600828988374865, 39.88632331032448, 14.392366637557455, 62.31670379718742, 56.2961038839078, 40.3301329276432, 43.50856787437951, 54.535191293350984, 43.86572339704485, 45.414742996902284, 57.545491249990796, 62.31670379718742, 34.76558113323671, 45.15667036083943, 41.8245235704856, 43.285803927267985, 31.29236674037406, 62.31670379718742, 13.477875959525374, 47.84512348376523, 38.73735532718288, 32.71199602184443, 27.673298950910752, 52.31670379718742, 38.425042953542096, 42.49399146679174, 55.327003753827235, 55.327003753827235, 45.15667036083943, 47.26520401398836, 45.414742996902284, 54.535191293350984, 41.27866658762785, 26.897169052605058, 55.327003753827235, 28.62825872892921, 27.253006626232384, 19.566586419407308, 42.44898645452497, 59.30640384054761, 51.52489133671117, 51.90277694560517, 37.18452779650803, 48.16697031747924, 39.86157711904592, 49.76397874615436, 49.30640384054761, 40.22155365176111, 49.30640384054761, 43.12592287342668, 50.27550397062817, 45.327003753827235, 41.244604100708735, 48.33730371046705, 57.545491249990796, 25.50972350021107, 48.69942543701149, 46.753678789514545, 33.13115849168469, 48.16697031747924, 40.824512670633624, 51.90277694560517, 62.31670379718742, 53.285803927267985, 42.97171928475174, 38.794878616073795, 30.481158460998806, 35.24100203620806, 31.561234183262115, 42.8228037307383, 42.31670379718742, 48.16697031747924, 21.951612511860127, 32.40887687915604, 43.92821288981487, 41.38248694556508, 57.545491249990796, 42.06364514453972, 51.52489133671117, 35.81362856586806, 30.962196803732283, 30.042979374291058, 30.29727316317092, 38.200506737555116, 50.55579120663061, 57.545491249990796, 19.54955885088451, 42.921511271001236, 49.529167787659134, 35.17340619973509, 38.13369088398997, 44.39278690220489, 55.327003753827235, 62.31670379718742, 40.55579120663061, 53.86572339704485, 2.660919516910389, 52.31670379718742, 52.31670379718742, 52.77427870279417, 22.931506545422504, 49.09451084984823, 42.631874311648076, 34.750342714728944, 39.88632331032448, 47.26520401398836, 59.30640384054761, 48.16697031747924, 62.31670379718742, 41.863474009320846, 41.21080669419493, 55.327003753827235, 25.14999404158607, 41.863474009320846, 41.59788372412617, 56.2961038839078, 59.30640384054761, 34.66001824959728, 37.45948953237162, 53.285803927267985, 28.543641286505434, 47.4030868588447, 57.545491249990796, 38.794878616073795, 26.440716499974968, 53.86572339704485, 49.76397874615436, 45.327003753827235, 38.83365516670581, 47.692723818197855, 48.33730371046705, 47.84512348376523, 59.30640384054761, 59.30640384054761, 27.72277891959511, 32.56698385420673, 43.285803927267985, 49.30640384054761, 50.27550397062817, 32.22644637631832, 19.113163469010704, 52.77427870279417, 37.17122627058457, 56.2961038839078, 41.67212390491823, 37.292432597343094, 39.26319010272118, 51.90277694560517, 48.16697031747924, 57.545491249990796, 25.21383732015851, 45.327003753827235, 43.12592287342668, 33.7494148933586, 62.31670379718742, 37.05331102328898, 59.30640384054761, 34.37182333059573, 24.936036649412728, 39.350051894572104, 39.32817303309036, 24.636245656163254, 49.09451084984823, 44.46340544707976, 42.31670379718742, 40.793820353356864, 59.30640384054761, 37.157965360070634, 40.44149658882279, 32.457950224103485, 51.17727027411905, 42.921511271001236, 29.26534060775103, 20.70871826180388, 41.27866658762785, 33.15743168021626, 34.81934064149681, 33.8906114010818, 19.271367693122244, 43.56609116327042, 47.00191462676487, 57.545491249990796, 59.30640384054761, 19.587154348705695, 62.31670379718742, 45.78457865943398, 45.78457865943398, 62.31670379718742, 59.30640384054761, 62.31670379718742, 34.842585718323186, 37.2516534731387, 42.23070207956824, 37.51663436761591, 43.56609116327042, 40.763343422536806, 47.545491249990796, 51.90277694560517, 43.50856787437951, 25.56809238980931, 42.23070207956824, 56.2961038839078, 48.16697031747924, 46.51886783101932, 39.37204153557148, 48.892476988965356, 62.31670379718742, 62.31670379718742, 57.545491249990796, 30.025006771796413, 39.692192899883125, 35.00888104052353, 39.57512530455062, 62.31670379718742, 38.606025174470055, 41.143990840629776, 23.637317288279576, 43.92821288981487, 45.882177032325544, 54.535191293350984, 51.90277694560517, 27.024967764570196, 40.88655579464647, 41.70972539365131, 37.375157857002996, 50.27550397062817, 50.55579120663061, 43.231853608400925, 46.876023353684666, 45.24100203620805, 62.31670379718742, 16.424023402560195, 52.31670379718742, 44.68242386155804, 41.41765268279344, 37.95507732677986, 45.882177032325544, 43.12592287342668, 62.31670379718742, 27.177871941076496, 46.08421089320842, 42.02286602033532, 59.30640384054761, 51.17727027411905, 59.30640384054761, 50.85542344040504, 43.340432884283004, 35.679694543290935, 39.46113070710968, 44.99276619895774, 34.09502300350725, 28.227523588719624, 62.31670379718742, 47.84512348376523, 50.55579120663061, 52.77427870279417, 32.15891623329701, 40.85542344040504, 41.863474009320846, 47.692723818197855, 54.535191293350984, 59.30640384054761, 25.613317385913, 42.44898645452497, 37.22467857387639, 35.8624811036965, 50.012214583404685, 38.532724787706044, 25.93880550356513, 40.19482775314784, 51.52489133671117, 48.69942543701149, 59.30640384054761, 36.15720328062341, 33.27496011434579, 45.414742996902284, 45.327003753827235, 59.30640384054761, 48.514591380071366, 43.50856787437951, 40.38545781364281, 54.535191293350984, 17.279205413234312, 40.67317523934305, 41.67212390491823, 62.31670379718742, 42.10481080648804, 38.87278106033631, 45.327003753827235, 30.602364787757338, 45.882177032325544, 57.545491249990796, 45.50429142343155, 38.932138861141375, 30.87719263294779, 45.982019241391555, 38.91226264878624, 33.71931813521595, 35.00081614532003, 41.8245235704856, 40.498267917739696, 35.8624811036965, 20.759093668408187, 39.09451084984823, 34.73515757751352, 46.2961038839078, 62.31670379718742, 34.66001824959728, 55.327003753827235, 23.89185955307172, 38.73735532718288, 46.753678789514545, 34.37879995027924, 50.85542344040504, 38.407352726153626, 25.571766624223923, 62.31670379718742, 55.327003753827235, 53.86572339704485, 37.2516534731387, 45.59572521783024, 44.834823527125415, 62.31670379718742, 33.41249360917828, 62.31670379718742, 57.545491249990796, 57.545491249990796, 46.63468655651747, 62.31670379718742, 62.31670379718742, 57.545491249990796, 53.86572339704485, 59.30640384054761, 28.45349805824696, 56.2961038839078, 51.17727027411905, 43.231853608400925, 55.327003753827235, 49.76397874615436, 48.69942543701149, 33.27496011434579, 46.753678789514545, 48.514591380071366, 62.31670379718742, 31.942438817781188, 62.31670379718742, 43.12592287342668, 46.753678789514545, 45.414742996902284, 41.38248694556508, 39.668525567092054, 44.60818368076598, 45.15667036083943, 55.327003753827235, 62.31670379718742, 26.128903552125276, 59.30640384054761, 46.51886783101932, 56.2961038839078, 48.892476988965356, 33.22114350477567, 39.621574355008256, 44.39278690220489, 57.545491249990796, 29.10279101407053, 47.545491249990796, 62.31670379718742, 57.545491249990796, 41.52489133671117, 39.37204153557148, 51.52489133671117, 31.147307331679862, 40.61408664323785, 38.389734264590764, 42.8228037307383, 35.92183890450156, 59.30640384054761, 51.52489133671117, 52.77427870279417, 33.01740819634154, 40.94949812562335, 35.93181122764105, 38.200506737555116, 36.188865229990064, 32.39558891931792, 44.68242386155804, 30.061026662792713, 48.892476988965356, 30.590674485088822, 21.711991869210635, 55.327003753827235, 44.12126444176874, 42.77427870279417, 49.09451084984823, 41.38248694556508, 47.692723818197855, 55.327003753827235, 33.95979808226316, 32.813055253426185, 32.26060934358462, 24.087181391712605, 55.327003753827235, 46.51886783101932, 44.46340544707976, 40.35770727309509, 36.814420266636475, 34.316410204746084, 34.1808939115055, 33.73735114999313, 27.336356560317153, 38.442805533800126, 42.631874311648076, 62.31670379718742, 47.26520401398836, 25.597573672771553, 44.535191293350984, 39.78817348738849, 42.72628987397649, 41.143990840629776, 38.62454522308599, 37.0147068151566, 41.863474009320846, 37.55999191394312, 51.90277694560517, 43.99161467012506, 62.31670379718742, 62.31670379718742, 40.793820353356864, 22.874345359252622, 48.892476988965356, 52.31670379718742, 62.31670379718742, 32.133860712922115, 38.68058399826598, 41.70972539365131, 38.5509342266223, 62.31670379718742, 52.31670379718742, 51.90277694560517, 47.545491249990796, 47.545491249990796, 62.31670379718742, 24.51353067578591, 38.73735532718288, 54.535191293350984, 37.347407316455275, 50.55579120663061, 57.545491249990796, 47.692723818197855, 59.30640384054761, 38.87278106033631, 40.44149658882279, 48.33730371046705, 62.31670379718742, 26.219692773393426, 45.59572521783024, 37.90761297653525, 44.834823527125415, 57.545491249990796, 29.810064602554988, 39.30640384054761, 38.46064106120429, 62.31670379718742, 43.02251454004449, 28.545463373722857, 44.75795524046251, 62.31670379718742, 43.12592287342668, 51.17727027411905, 47.545491249990796, 47.84512348376523, 33.17327222599302, 18.763338182063613, 59.30640384054761, 59.30640384054761, 62.31670379718742, 46.51886783101932, 53.86572339704485, 62.31670379718742, 57.545491249990796, 50.55579120663061, 44.834823527125415, 57.545491249990796, 55.327003753827235, 35.577283810846545, 38.661823948278425, 37.26520401398836, 62.31670379718742, 31.974431189481912, 51.17727027411905, 50.012214583404685, 49.09451084984823, 48.514591380071366, 21.94044709804023, 48.514591380071366, 40.643530449705665, 45.414742996902284, 41.902776945605176, 49.30640384054761, 37.87625583800666, 39.37204153557148, 50.85542344040504, 21.85956320777875, 31.97844685765432, 30.622898844067926, 54.535191293350984, 50.85542344040504, 52.77427870279417, 52.77427870279417, 31.27524829164734, 18.933732894860512, 50.55579120663061, 50.012214583404685, 62.31670379718742, 28.163630874931748, 47.84512348376523, 36.178285578426724, 45.59572521783024, 43.50856787437951, 62.31670379718742, 62.31670379718742, 19.859850154855067, 53.285803927267985, 59.30640384054761, 56.2961038839078, 43.50856787437951, 41.67212390491823]
            , dtype = 'float32').reshape(1,600) # HOI loss weight
pvp_weight = {
    'P0': torch.from_numpy(np.array([ 43.2812,  49.5520,  69.6451,  77.5116,  88.3417,  95.5558,  76.5148,  93.8608,  103.3516,  60.6352,  92.0465,  25.2341,  ])).float(),
    'P1': torch.from_numpy(np.array([ 69.5596,  77.4802,  88.1881,  95.5558,  60.6139,  65.1348,  48.4978,  103.3516,  92.0915,  24.0444,  ])).float(),
    'P2': torch.from_numpy(np.array([ 36.3299,  56.6936,  46.2726,  65.2572,  27.7231,  ])).float(),
    'P3': torch.from_numpy(np.array([ 32.5367,  72.1672,  63.7646,  61.0690,  61.1483,  90.1340,  84.7626,  83.8529,  82.5052,  97.7554,  94.3004,  104.3744,  104.0713,  66.0379,  92.7910,  90.7056,  75.8540,  84.6549,  76.3548,  67.6484,  67.5938,  76.3361,  75.2008,  68.9715,  77.6701,  88.5925,  80.4797,  75.6431,  83.4084,  96.2822,  29.3323,  ])).float(),
    'P4': torch.from_numpy(np.array([ 61.9114,  65.4154,  65.6752,  70.1946,  23.5435,  ])).float(),
    'P5': torch.from_numpy(np.array([ 65.3873,  46.7805,  85.3648,  106.6058,  69.8477,  77.9509,  69.3396,  85.8354,  85.9080,  82.4364,  92.2733,  68.3823,  24.3365,  ])).float(),
    'labels_r': torch.from_numpy(HO_weight).float(),

}
names = [
    'stands on','treads step on','walks with','walks to','runs with','runs to',
    'dribbles','kicks','jumps down','jumps with','walks away','no interaction',
    'walks with','walks to','runs with','runs to','jumps with','closes with',
    'straddles','jumps down','walks away','no interaction',
    'sits on','sits in','sits beside','is close with','no interaction',
    'holds','carries','reaches for','touches','puts on','twists','wears','throws',
    'throws out','writes on','points with','points to','uses sth. point to','presses',
    'squeezes','scratches','pinches','gestures to','pushes','pulls','pulls with sth.',
    'washes','washes with sth.','holds in both hands','lifts','raises','feeds',
    'cuts with sth.','catches with sth.','pours into','no interaction',
    'carries','close to','hugs','swings','no interaction',
    'eats','inspects','talks with','talks to','closes with','kisses',
    'puts sth. over','licks','blows','drinks with','smells','wears','no interaction',
]
ignore = [11, 21, 26, 57, 62, 75]
no_in = []
for i in range(12):
    no_in.append(11)
for i in range(12, 22):
    no_in.append(21)
for i in range(22, 27):
    no_in.append(26)
for i in range(27, 58):
    no_in.append(57)
for i in range(58, 63):
    no_in.append(62)
for i in range(63, 76):
    no_in.append(75)


def iou(bb1, bb2):
    x1 = bb1[2] - bb1[0]
    y1 = bb1[3] - bb1[1]
    if x1 < 0:
        x1 = 0
    if y1 < 0:
        y1 = 0
    
    x2 = bb2[2] - bb2[0]
    y2 = bb2[3] - bb2[1]
    if x2 < 0:
        x2 = 0
    if y2 < 0:
        y2 = 0
    
    xiou = min(bb1[2], bb2[2]) - max(bb1[0], bb2[0])
    yiou = min(bb1[3], bb2[3]) - max(bb1[1], bb2[1])
    if xiou < 0:
        xiou = 0
    if yiou < 0:
        yiou = 0
    
    if xiou * yiou <= 0:
        return 0
    else:
        return xiou * yiou / (x1 * y1 + x2 * y2 - xiou * yiou)

def calc_hit(hbox, obox, hobox):
    hiou = iou(hbox, hobox[:4])
    oiou = iou(obox, hobox[4:])
    return max(hiou, oiou)
    
def calc_PVP76(keyss, hboxes, oboxes, scores, obj, id):
    gt_label = pickle.load(open('PVP_mat/PVP_%d.pkl' % id, 'rb'))
    used = {}
    sum = 0
    hit, recog = [], []
    for key in gt_label.keys():
        used[key] = set()
        sum += len(gt_label[key])
    if sum == 0:
        return np.nan, np.nan
        
    obj_mask = pickle.load(open('obj_mask.pkl', 'rb'))
    obj_bool = obj_mask[id, obj]
    select   = np.where(obj_bool > 0)[0]
    if len(select) == 0:
        return 0, 0
    keys  = keyss[select]
    hbox  = hboxes[select, :]
    obox  = oboxes[select, :]
    score = scores[select]

    idx = np.argsort(score, axis=0)[::-1]
    for i_idx in range(len(idx)):
        pair_id = idx[i_idx]
        if keys[pair_id] not in gt_label:
            hit.append(0)
            recog.append(0)
        else:
            maximum = 0.0
            hit_idx = -1
            for i in range(len(gt_label[keys[pair_id]])):
                item = gt_label[keys[pair_id]][i]
                tmp = calc_hit(hbox[pair_id], obox[pair_id], item[0, :])
                if tmp > 0.3:
                    if tmp > maximum:
                        maximum = tmp
                        hit_idx = i
            if hit_idx == -1:
                hit.append(0)
                recog.append(0)
            elif hit_idx in used[keys[pair_id]]:
                hit.append(1)
                recog.append(0)
            else:
                used[keys[pair_id]].add(hit_idx)
                hit.append(1)
                recog.append(1)

    bottom = np.array(range(len(hit))) + 1
    hit    = np.cumsum(np.array(hit))
    recog  = np.cumsum(np.array(recog))
    rec    = recog / sum
    prec   = hit / bottom
    ap     = 0.0
    for i in [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]:
        mask = rec >= i
        if np.sum(mask) <= 0:
            continue
        ap += np.max(prec[mask])
    ap    /= 11.0
    return ap, np.max(rec)

def get_map(keys, bboxes, scores, obj, part):
    mapping = {
        'P0': (0, 12), 
        'P1': (12, 22), 
        'P2': (22, 27), 
        'P3': (27, 58), 
        'P4': (58, 63), 
        'P5': (63, 76), 
    }
    x, y = mapping[part]
    map = np.zeros(y - x)
    for id in range(x, y):
        map[id - x], _ = calc_PVP76(keys, bboxes[:, :4], bboxes[:, 4:], scores[:, id - x], obj, id)
    return map

def Generate_PVP_detection(output_file, HICO_dir):

    print('the output file is', output_file)
    
    with h5py.File('Test_1100000_HICO_DET_GRWM_HRS_0.8_0.3.h5', 'r') as f:
        keys = f['key'][...]
        hbox = f['H'][...]
        obox = f['O'][...]
        score = f['PVP'][:, :]
        SH   = f['SH'][:]
        SO   = f['SO'][:]
        obj  = f['obj'][:] - 1
        score = score * SH[:, None] * SO[:, None]
    map  = np.zeros(76, dtype='float')
    rec = np.zeros(76, dtype='float')

    for i in range(76):
        map[i], rec[i] = calc_PVP76(keys, hbox, obox, score, obj, i)
        print(map[i], rec[i])
    
    with open(HICO_dir, 'w') as f:
        f.write('PVP76 Evaluation\n')
        for i in range(76):
            f.write('Name:%22s, AP:%.4f, REC:%.4f\n' % (names[i], float(map[i]), float(rec[i])))
        f.write(
            'Foot, AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[:12])), 
                float(np.nanmean(map[:11])), 
                float(np.nanmean(rec[:12])), 
                float(np.nanmean(rec[:11]))
            )
        )
        f.write(
            'Leg,  AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[12:22])), 
                float(np.nanmean(map[12:21])), 
                float(np.nanmean(rec[12:22])), 
                float(np.nanmean(rec[12:21]))
            )
        )
        f.write(
            'Hip,  AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[22:27])), 
                float(np.nanmean(map[22:26])), 
                float(np.nanmean(rec[22:27])), 
                float(np.nanmean(rec[22:26]))
            )
        )
        f.write(
            'Hand, AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[27:58])), 
                float(np.nanmean(map[27:57])), 
                float(np.nanmean(rec[27:58])), 
                float(np.nanmean(rec[27:57]))
            )
        )
        f.write(
            'Arm,  AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[58:63])), 
                float(np.nanmean(map[58:62])), 
                float(np.nanmean(rec[58:63])), 
                float(np.nanmean(rec[58:62]))
            )
        )
        f.write(
            'Head, AP:%.4f(%.4f), REC:%.4f(%.4f)\n' % (
                float(np.nanmean(map[63:])), 
                float(np.nanmean(map[63:75])), 
                float(np.nanmean(rec[63:])), 
                float(np.nanmean(rec[63:75]))
            )
        )
        
        f.write(
            'All,  AP:%.4f, REC:%.4f\n' % (
                float(np.nanmean(map)), 
                float(np.nanmean(rec))
            )
        )